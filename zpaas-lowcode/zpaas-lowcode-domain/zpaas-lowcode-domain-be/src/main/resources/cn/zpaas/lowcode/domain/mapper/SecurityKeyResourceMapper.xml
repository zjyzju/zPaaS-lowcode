<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.zpaas.lowcode.domain.mapper.SecurityKeyResourceMapper">
  <resultMap id="BaseResultMap" type="cn.zpaas.lowcode.domain.eo.SecurityKeyResource">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="security_key" jdbcType="VARCHAR" property="securityKey" />
    <result column="cipher_algorithm" jdbcType="VARCHAR" property="cipherAlgorithm" />
    <result column="private_key_file_name" jdbcType="VARCHAR" property="privateKeyFileName" />
    <result column="public_key_file_name" jdbcType="VARCHAR" property="publicKeyFileName" />
    <result column="private_key_pwd" jdbcType="VARCHAR" property="privateKeyPwd" />
    <result column="tenant_id" jdbcType="VARCHAR" property="tenantId" />
    <result column="system_id" jdbcType="VARCHAR" property="systemId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.zpaas.lowcode.domain.eo.SecurityKeyResource">
    <result column="private_key_file" jdbcType="LONGVARBINARY" property="privateKeyFile" />
    <result column="public_key_file" jdbcType="LONGVARBINARY" property="publicKeyFile" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, name, type, security_key, cipher_algorithm, private_key_file_name, public_key_file_name, 
    private_key_pwd, tenant_id, system_id, create_time, update_time
  </sql>
  <sql id="Blob_Column_List">
    private_key_file, public_key_file
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="cn.zpaas.lowcode.domain.eo.SecurityKeyResourceExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from be_security_key_resource
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="cn.zpaas.lowcode.domain.eo.SecurityKeyResourceExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from be_security_key_resource
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from be_security_key_resource
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from be_security_key_resource
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="cn.zpaas.lowcode.domain.eo.SecurityKeyResourceExample">
    delete from be_security_key_resource
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.zpaas.lowcode.domain.eo.SecurityKeyResource">
    insert into be_security_key_resource (id, name, type, 
      security_key, cipher_algorithm, private_key_file_name, 
      public_key_file_name, private_key_pwd, tenant_id, 
      system_id, create_time, update_time, 
      private_key_file, public_key_file
      )
    values (#{id,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, 
      #{securityKey,jdbcType=VARCHAR}, #{cipherAlgorithm,jdbcType=VARCHAR}, #{privateKeyFileName,jdbcType=VARCHAR}, 
      #{publicKeyFileName,jdbcType=VARCHAR}, #{privateKeyPwd,jdbcType=VARCHAR}, #{tenantId,jdbcType=VARCHAR}, 
      #{systemId,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{privateKeyFile,jdbcType=LONGVARBINARY}, #{publicKeyFile,jdbcType=LONGVARBINARY}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.zpaas.lowcode.domain.eo.SecurityKeyResource">
    insert into be_security_key_resource
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="securityKey != null">
        security_key,
      </if>
      <if test="cipherAlgorithm != null">
        cipher_algorithm,
      </if>
      <if test="privateKeyFileName != null">
        private_key_file_name,
      </if>
      <if test="publicKeyFileName != null">
        public_key_file_name,
      </if>
      <if test="privateKeyPwd != null">
        private_key_pwd,
      </if>
      <if test="tenantId != null">
        tenant_id,
      </if>
      <if test="systemId != null">
        system_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="privateKeyFile != null">
        private_key_file,
      </if>
      <if test="publicKeyFile != null">
        public_key_file,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="securityKey != null">
        #{securityKey,jdbcType=VARCHAR},
      </if>
      <if test="cipherAlgorithm != null">
        #{cipherAlgorithm,jdbcType=VARCHAR},
      </if>
      <if test="privateKeyFileName != null">
        #{privateKeyFileName,jdbcType=VARCHAR},
      </if>
      <if test="publicKeyFileName != null">
        #{publicKeyFileName,jdbcType=VARCHAR},
      </if>
      <if test="privateKeyPwd != null">
        #{privateKeyPwd,jdbcType=VARCHAR},
      </if>
      <if test="tenantId != null">
        #{tenantId,jdbcType=VARCHAR},
      </if>
      <if test="systemId != null">
        #{systemId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="privateKeyFile != null">
        #{privateKeyFile,jdbcType=LONGVARBINARY},
      </if>
      <if test="publicKeyFile != null">
        #{publicKeyFile,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.zpaas.lowcode.domain.eo.SecurityKeyResourceExample" resultType="java.lang.Long">
    select count(*) from be_security_key_resource
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update be_security_key_resource
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=VARCHAR},
      </if>
      <if test="record.securityKey != null">
        security_key = #{record.securityKey,jdbcType=VARCHAR},
      </if>
      <if test="record.cipherAlgorithm != null">
        cipher_algorithm = #{record.cipherAlgorithm,jdbcType=VARCHAR},
      </if>
      <if test="record.privateKeyFileName != null">
        private_key_file_name = #{record.privateKeyFileName,jdbcType=VARCHAR},
      </if>
      <if test="record.publicKeyFileName != null">
        public_key_file_name = #{record.publicKeyFileName,jdbcType=VARCHAR},
      </if>
      <if test="record.privateKeyPwd != null">
        private_key_pwd = #{record.privateKeyPwd,jdbcType=VARCHAR},
      </if>
      <if test="record.tenantId != null">
        tenant_id = #{record.tenantId,jdbcType=VARCHAR},
      </if>
      <if test="record.systemId != null">
        system_id = #{record.systemId,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.privateKeyFile != null">
        private_key_file = #{record.privateKeyFile,jdbcType=LONGVARBINARY},
      </if>
      <if test="record.publicKeyFile != null">
        public_key_file = #{record.publicKeyFile,jdbcType=LONGVARBINARY},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update be_security_key_resource
    set id = #{record.id,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=VARCHAR},
      security_key = #{record.securityKey,jdbcType=VARCHAR},
      cipher_algorithm = #{record.cipherAlgorithm,jdbcType=VARCHAR},
      private_key_file_name = #{record.privateKeyFileName,jdbcType=VARCHAR},
      public_key_file_name = #{record.publicKeyFileName,jdbcType=VARCHAR},
      private_key_pwd = #{record.privateKeyPwd,jdbcType=VARCHAR},
      tenant_id = #{record.tenantId,jdbcType=VARCHAR},
      system_id = #{record.systemId,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      private_key_file = #{record.privateKeyFile,jdbcType=LONGVARBINARY},
      public_key_file = #{record.publicKeyFile,jdbcType=LONGVARBINARY}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update be_security_key_resource
    set id = #{record.id,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=VARCHAR},
      security_key = #{record.securityKey,jdbcType=VARCHAR},
      cipher_algorithm = #{record.cipherAlgorithm,jdbcType=VARCHAR},
      private_key_file_name = #{record.privateKeyFileName,jdbcType=VARCHAR},
      public_key_file_name = #{record.publicKeyFileName,jdbcType=VARCHAR},
      private_key_pwd = #{record.privateKeyPwd,jdbcType=VARCHAR},
      tenant_id = #{record.tenantId,jdbcType=VARCHAR},
      system_id = #{record.systemId,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.zpaas.lowcode.domain.eo.SecurityKeyResource">
    update be_security_key_resource
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="securityKey != null">
        security_key = #{securityKey,jdbcType=VARCHAR},
      </if>
      <if test="cipherAlgorithm != null">
        cipher_algorithm = #{cipherAlgorithm,jdbcType=VARCHAR},
      </if>
      <if test="privateKeyFileName != null">
        private_key_file_name = #{privateKeyFileName,jdbcType=VARCHAR},
      </if>
      <if test="publicKeyFileName != null">
        public_key_file_name = #{publicKeyFileName,jdbcType=VARCHAR},
      </if>
      <if test="privateKeyPwd != null">
        private_key_pwd = #{privateKeyPwd,jdbcType=VARCHAR},
      </if>
      <if test="tenantId != null">
        tenant_id = #{tenantId,jdbcType=VARCHAR},
      </if>
      <if test="systemId != null">
        system_id = #{systemId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="privateKeyFile != null">
        private_key_file = #{privateKeyFile,jdbcType=LONGVARBINARY},
      </if>
      <if test="publicKeyFile != null">
        public_key_file = #{publicKeyFile,jdbcType=LONGVARBINARY},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.zpaas.lowcode.domain.eo.SecurityKeyResource">
    update be_security_key_resource
    set name = #{name,jdbcType=VARCHAR},
      type = #{type,jdbcType=VARCHAR},
      security_key = #{securityKey,jdbcType=VARCHAR},
      cipher_algorithm = #{cipherAlgorithm,jdbcType=VARCHAR},
      private_key_file_name = #{privateKeyFileName,jdbcType=VARCHAR},
      public_key_file_name = #{publicKeyFileName,jdbcType=VARCHAR},
      private_key_pwd = #{privateKeyPwd,jdbcType=VARCHAR},
      tenant_id = #{tenantId,jdbcType=VARCHAR},
      system_id = #{systemId,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      private_key_file = #{privateKeyFile,jdbcType=LONGVARBINARY},
      public_key_file = #{publicKeyFile,jdbcType=LONGVARBINARY}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.zpaas.lowcode.domain.eo.SecurityKeyResource">
    update be_security_key_resource
    set name = #{name,jdbcType=VARCHAR},
      type = #{type,jdbcType=VARCHAR},
      security_key = #{securityKey,jdbcType=VARCHAR},
      cipher_algorithm = #{cipherAlgorithm,jdbcType=VARCHAR},
      private_key_file_name = #{privateKeyFileName,jdbcType=VARCHAR},
      public_key_file_name = #{publicKeyFileName,jdbcType=VARCHAR},
      private_key_pwd = #{privateKeyPwd,jdbcType=VARCHAR},
      tenant_id = #{tenantId,jdbcType=VARCHAR},
      system_id = #{systemId,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>